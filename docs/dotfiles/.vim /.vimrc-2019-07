" basics 
syntax on
filetype plugin indent on
set ts=4 sw=4 et " set tabstop=4 shiftwidth=4 expandtab
set spell spelllang=en_us,es
set clipboard=unnamedplus 
set showcmd encoding=utf-8 fileencoding=utf-8 nocompatible
set clipboard^=unnamed
set linebreak
set number relativenumber nobackup nowritebackup noswapfile ignorecase
set omnifunc=htmlcomplete#CompleteTags
set shortmess+=A
set wildmode=longest,list,full
set background=dark " for indentguides
set swapfile " set dir=~/tmp
set incsearch
set hlsearch
set foldmethod=indent
" set cursorline
setlocal foldmethod=manual

" Disables automatic commenting on newline:
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

" save with ctrl + s
" noremap <silent> <C-S>          :update<CR>
" vnoremap <silent> <C-S>         <C-C>:update<CR>
" inoremap <silent> <C-S>         <C-O>:update<CR>

let g:indent_guides_enable_on_vim_startup=1
let g:indent_guides_guide_size=1
" let g:python_recommended_style=0
" let g:markdown_recommended_style=1
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>

nnoremap <silent> - s<c-r>=tr(@",'aeioucnAEIOUCNáéíóúçñÁÉÍÓÚÇÑ', 'áéíóúçñÁÉÍÓUÇÑaeioucnAEIOUCN')<cr><esc>
:iabbrev </ </<C-X><C-O>
map <F2> :!wc <C-R>%<CR> " Word count " Get line, word and character counts with F2. " https://www.dralexnorman.net/post/a-literate-vimrc-file/
map <F6> :setlocal spell! spelllang=en,es<CR>
nmap <F3> i<C-R>=strftime("%Y-%m-%d")<CR><Esc> imap <F3> <C-R>=strftime("%Y-%m-%d")<CR> " https://stackoverflow.com/questions/56052/best-way-to-insert-timestamp-in-vim " 

autocmd FileType apache setlocal commentstring=#\ %s " https://github.com/tpope/vim-commentary // gcc +++++++
autocmd FileType xml set omnifunc=xmlcomplete#CompleteTags
autocmd Filetype markdown map <F5> :!pandoc<space><C-r>%<space>-o<space><C-r>%<backspace><backspace><backspace>.pdf<Enter><Enter>
autocmd Filetype rmd map <F5> :!echo<space>"require(rmarkdown);<space>render('<c-r>%')"<space>\|<space>R<space>--vanilla<enter>
autocmd Filetype markdown map <F9> :!pandoc<space><C-r>%<space>-o<space><C-r>%<backspace><backspace><backspace>.html<space>-s<Enter><Enter> " my script for html template!! 
autocmd BufRead,BufNewFile /tmp/calcurse set filetype#markdown " Make calcurse use markdown by default
autocmd BufRead,BufNewFile ~/.calcurse/notes/* set filetype#markdown


hi IndentGuidesOdd  ctermbg=black
hi IndentGuidesEven ctermbg=lightgrey
hi clear SpellBad
hi SpellBad cterm=bold cterm=underline  ctermfg=yellow " guifg=yellow 

execute pathogen#infect()
syntax on
filetype plugin indent on
" autocmd FileType html set omnifunc=htmlcomplete#CompleteTags
" AutoPairs Plugin installed to close: ([{}])
" call plug#begin('~/.vim/plugged')
" set omnifunc=htmlcomplete#CompleteTags
autocmd FileType html set omnifunc=htmlcomplete#CompleteTags

" https://vim.fandom.com/wiki/Auto_closing_an_HTML_tag
function s:CompleteTags()
      inoremap <buffer> > ></<C-x><C-o><Esc>:startinsert!<CR><C-O>?</<CR>
        inoremap <buffer> ><Leader> >
          inoremap <buffer> ><CR> ></<C-x><C-o><Esc>:startinsert!<CR><C-O>?</<CR><CR><Tab><CR><Up><C-O>$
      endfunction
      autocmd BufRead,BufNewFile *.html,*.js,*.xml call s:CompleteTags()


" if empty(glob('~/.vim/autoload/plug.vim'))
"   silent execute "!curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim"
"   autocmd VimEnter * PlugInstall | source $MYVIMRC
" endif

let g:bullets_enabled_file_types = ['markdown', 'text', 'gitcommit']

" ******

""".bib
autocmd FileType bib inoremap ,a @article{<Enter><tab>author<Space>=<Space>{  },<Enter>year<Space>=<Space>{  },<Enter>title<Space>=<Space>{  },<Enter>journal<Space>=<Space>{  },<Enter>volume<Space>=<Space>{  },<Enter>pages<Space>=<Space>{  },<Enter>}<Enter><Esc>8kA,<Esc>i
autocmd FileType bib inoremap ,b @book{<Enter>author<Space>=<Space>{},<Enter>year<Space>=<Space>{},<Enter>title<Space>=<Space>{},<Enter>publisher<Space>=<Space>{},<Enter>}<Enter><Esc>6kA,<Esc>i
autocmd FileType bib inoremap ,c @incollection{<Enter>author<Space>=<Space>{<++>},<Enter>title<Space>=<Space>{<++>},<Enter>booktitle<Space>=<Space>{<++>},<Enter>editor<Space>=<Space>{<++>},<Enter>year<Space>=<Space>{<++>},<Enter>publisher<Space>=<Space>{<++>},<Enter>}<Enter><++><Esc>8kA,<Esc>i


" I use zO and zc to open and close nested folds, respectively.
" How to fold/unfold HTML tags with Vim " https://stackoverflow.com/a/17384809/6253165
" setlocal foldmethod=syntax " http://vim.wikia.com/wiki/VimTip991 " VIM WIKI | Make views automatic

" Ditto vim plugin
" Use autocmds to check your text automatically and keep the highlighting
" up to date (easier):
" au FileType md,markdown,text,tex DittoOn  " Turn on Ditto's autocmds
nmap <leader>di <Plug>ToggleDitto      " Turn Ditto on and off

" If you don't want the autocmds, you can also use an operator to check
" specific parts of your text:
" vmap <leader>d <Plug>Ditto	       " Call Ditto on visual selection
" nmap <leader>d <Plug>Ditto	       " Call Ditto on operator movement

nmap =d <Plug>DittoNext                " Jump to the next word
nmap -d <Plug>DittoPrev                " Jump to the previous word
nmap +d <Plug>DittoGood                " Ignore the word under the cursor
nmap _d <Plug>DittoBad                 " Stop ignoring the word under the cursor
nmap ]d <Plug>DittoMore                " Show the next matches
nmap [d <Plug>DittoLess                " Show the previous matches

" set termguicolors
" colorscheme herokudoc " +++ very neat and bright +++ " LAST colorscheme is valid ** BEST CHOICE FOR LONG TIME, and yet looking for alternatives
" colorscheme onedark "+++ good Balance!! nice but poor highlight
" colorscheme monochrome " + pretty cool actually!!
 
" colorscheme solarized " classic
" colorscheme Base2Tone_EveningDark " great contrast but orange
" colorscheme magicwb " great grey background some colors too light
" colorscheme Base2Tone_LakeDark " blueparagraphs +contrast. yellow
" colorscheme Base2Tone_ForestDark " +++ yellow power
" colorscheme detailed " good contrast. a bit darkcolorscheme lucius " good but lacks contrast 
" colorscheme materialbox " Smooth
 
" colorscheme 1989 " material-monokai
" colorscheme matrix " AWESOME but no highlight
" colorscheme dejavu " PERFECT but no spelling marks
" colorscheme seoul256 " mustard " SerialExperimentsLain
" colorscheme meta5 " orange but brown? install!!
" colorscheme smyck " no highlight in paragraph " install!!
" More COLORSCHEMES " deus " stellarized_dark " synthwave " xedit " vrunchbang-dark " subtle_dark " relaxedgreen " alchemie " plain " papaya " shadesofamber " blueprint " seagrey-dark " forgotten-dark "  rupza "  northpole "  perun "  lucariox "  typewriter-night "  bdconry "  duoduo

" https://github.com/vim-scripts/ScrollColors >> Command :SCROLL 
" shortlist 2018-12-15 [240 colors]
" 11 adrian | matrix like ++++++++ " doesn't show type errors ----
" 18 astronaut | matrix like ++++++++ " doesn't show type errors ----
" 26 bigbang | matrix like ++++++++ " doesn't show type errors ----
" 92 gentooish ! simple black and white with proper highlights ++++ 
" 95 greenwint | simple with highlights, perhaps too monochrome ++
" 111 kellys ++
" 144 mustard | light-blue background ++

" 1 1989
" 11 adrian | matrix like ++++++++ " doesn't show type errors ----
" 18 astronaut | matrix like ++++++++ " doesn't show type errors ----
" 26 bigbang | matrix like ++++++++ " doesn't show type errors ----
" 50 darkblue
" 66 deus | has highlights
" 79 elflord
" 92 gentooish ! simple black and white with proper highlights ++++ 
" 95 greenwint | simple with highlights, perhaps too monochrome ++
" 97 gruvbox | nice yellow paper style but light background 
" 101 herokudoc | grey neat background
" 110 jellybeans
" 111 kellys ++
" 124 masmed | blueprint
" 125 material-monokai | blueprint
" 128 matrix
" 135 mizore matrix aqua
" 144 mustard | light-blue background ++
" 188 sea | blueprint | no highlight
" 201 solarized
" 206 subtle dark
" 209 synthwave
" 210 tabula | green background smooth
" 215 tesla | dark blue background very calm
" 223 vimhut | purplish neat 
" 223 vividchalk | similar prior more contrast
" 231 wood | almost brown grayscale
" 232 wuye | shows line by line very nitid
" 237 zenburn

" https://medium.freecodecamp.org/learn-linux-vim-basic-features-19134461ab85
" // this article is very good. gives more detail on how to control the amount
" of lines folding. for instance: `:5,16fo` (fo stands for code fold)
" autocmd BufWinLeave *.* mkview
" autocmd BufWinEnter *.* silent loadview 

" noremap <silent> <C-S>          :update<CR> " saving with <C-S> instead of :w<R>
" vnoremap <silent> <C-S>         <C-C>:update<CR>
" inoremap <silent> <C-S>         <C-O>:update<CR>


" https://stackoverflow.com/questions/6411979/compiling-java-code-in-vim-more-efficiently
autocmd Filetype java set makeprg=javac\ %
set errorformat=%A%f:%l:\ %m,%-Z%p^,%-C%.%#
map <F9> :make<Return>:copen<Return>
map <F10> :cprevious<Return>
map <F11> :cnext<Return>

" http://learnvimscriptthehardway.stevelosh.com/chapters/07.html
" this allows direct acces to vimrc from any vim instance
:nnoremap <leader>ev :vsplit $MYVIMRC<cr>
:nnoremap <leader>eb :vsplit /home/nilon/Public/ramoneando/docs/mybib.bib<cr>
:nnoremap <leader>ei :vsplit /home/nilon/Public/ramoneando/ultra/index.html<cr>

" jump to the last position when reopening a file
if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal! g'\"" | endif
endif

" https://github.com/LukeSmithxyz/shortcut-sync """" ** bash, ranger and qutebrowser synchronization **
autocmd BufWritePost ~/.scripts/folders,~/.scripts/configs !bash ~/.scripts/shortcuts.sh

" " https://github.com/mcantor/no_plugins/blob/master/no_plugins.vim
" " https://www.youtube.com/watch?v=XA2WjJbmmoM
" FINDING FILES: " Search down into subfolders " Provides tab-completion for all file-related tasks
set path+=**
set wildmenu " Display all matching files when we tab complete

" NOW WE CAN: " - Hit tab to :find by partial match " - Use * to make it fuzzy
" THINGS TO CONSIDER: " - :b lets you autocomplete any open buffer

" AUTOCOMPLETE: The good stuff is documented in |ins-completion| " HIGHLIGHTS: 
" - ^x^f for filenames (works with our path trick!)
" - ^n for anything specified by the 'complete' option
" NOW WE CAN: - Use ^n and ^p to go back and forth in the suggestion list

" filenames like *.xml, *.html, *.xhtml, ...
" let g:closetag_filenames = "*.html,*.xhtml,*.phtml"
" autocmd vimenter * NERDTree
" instead of NERDTree the following can find: any file!!
" http://yannesposito.com/Scratch/en/blog/Vim-as-IDE/
" https://github.com/ggreer/the_silver_searcher
let g:ackprg = 'ag --nogroup --nocolor --column'

" function! ToggleAccent() 
"  " Vowels
"  let withAccent   = ["á" ,"é" ,"í" ,"ó" ,"ú" ,"Á" ,"É" ,"Í" ,"Ó" ,"Ú", "ñ", "Ñ", "ç", "Ç" ]
"  let withNoAccent = ["a" ,"e" ,"i" ,"o" ,"u" ,"A" ,"E" ,"I" ,"O" ,"U", "n", "N", "c", "C" ]
"
"  " A better way of getting the character under the cursor. From: https://stackoverflow.com/a/23323958/1121933
"  let character = matchstr( getline('.'), '\%' . col('.') . 'c.' )
"
"   " If it's a vowel without an acute accent over it, 'position' will contain
"   " the index of the matching element in the 'withNoAccent' list or -1 otherwise.
"   let position = match( withNoAccent , character )
"   if position != -1
"      " Replace it with an accented vowel
"      execute ":normal! r" . withAccent[position]
"   else
"      " Check if it's a vowel with an acute accent over it
"      let position = match( withAccent , character )
"      if position != -1
"         " Replace it with a vowel with no accent
"         execute ":normal! r" . withNoAccent[position]
"     endif
"   endif
"
"  " Do nothing if it isn't a vowel
"endfunction

" Map the '-' key
" nnoremap <silent> - :call ToggleAccent()<CR>

" Go to last file if invoked without arguments.
autocmd VimEnter * nested if
  \ argc() == 0 &&
  \ bufname("%") == "" &&
  \ bufname("2" + 0) != "" |
  \   exe "normal! `0" |
  \ endif

" http://vim.wikia.com/wiki/Open_the_last_edited_file
" Open last active file(s) if VIM is invoked without arguments.
autocmd VimLeave * nested let buffernr = bufnr("$") |
    \ let buflist = [] |
    \ while buffernr > 0 |
    \	if buflisted(buffernr) |
    \	    let buflist += [ bufname(buffernr) ] |
    \	endif |
    \   let buffernr -= 1 |
    \ endwhile |
    \ if (!isdirectory($HOME . "/.vim")) |
    \	call mkdir($HOME . "/.vim") |
    \ endif |
    \ call writefile(reverse(buflist), $HOME . "/.vim/buflist.txt")

autocmd VimEnter * nested if argc() == 0 && filereadable($HOME . "/.vim/buflist.txt") |
    \	for line in readfile($HOME . "/.vim/buflist.txt") |
    \	    if filereadable(line) |
    \		execute "tabedit " . line |
    \		set bufhidden=delete |
    \	    endif |
    \	endfor |
    \	tabclose 1 |
    \ endif"


" VIM - Minimal Setup Explained " http://www.guckes.net/vim/setup.html
" set termguicolors
" colorscheme adrian matrix solarized
" auto-save " https://vi.stackexchange.com/a/79/12815 " autocmd CursorHold * update
" autocmd CursorHold,CursorHoldI * update
" Compile to .pdf | https://www.dralexnorman.net/post/a-literate-vimrc-file/ " This command executes the script compiler that is adapted from Luke Smith’s file of the same name, and that ships with his LARBS setup. The script builds a pdf with default settings using pandoc. " map <leader>c :!pandoc <c-r>%<CR>
" map <F6> :vsp<space>~/Public/ramoneando/docs/mybib.bib<CR> " Open my .bib file | Open my bibliography file in split

" call plug#begin('~/.vim/plugged')
" Plug 'thaerkh/vim-indentguides'
" call plug#end()

" let g:indentLine_fileTypeExclude = ['json']
" let g:indentLine_fileTypeExclude = ['markdown']

" Let indentLine use current conceal options
" let g:indentLine_conceallevel  = &conceallevel
" let g:indentLine_concealcursor = &concealcursor

" let g:indentLine_enabled = 2

